@page "/contacts"
@using NicolaParo.NetConf2022.NotificationSender.Models;
@using NicolaParo.NetConf2022.NotificationSender.Services.Repositories;
@using Microsoft.AspNetCore.Components.QuickGrid;

@inject IContactsRepository contactsRepository

<div class="mx-auto mb-4 w-50">
    <input type="text" class="form-control" placeholder="Search..." value="@searchValue" @onchange="(e) => searchValue = e.Value.ToString() " />
</div>

<div style="overflow: auto; height: 25em">
    <QuickGrid Items="contacts" Class="table" Virtualize=true>
        <TemplateColumn Context="c" Title="Id">
            <span title="@c.Id">
                @(c.Id.ToString()[..8])...
            </span>
        </TemplateColumn>
        <PropertyColumn Sortable=true Property="c => c.FirstName" Title="First Name" />
        <PropertyColumn Sortable=true Property="c => c.LastName" Title="Last Name" />
        <TemplateColumn Context="c" Title="Email">
            @c.Email?.Address
        </TemplateColumn>
        <TemplateColumn Context="c" Title="Phone Number">
            @c.Phone?.Number
        </TemplateColumn>
        <TemplateColumn Context="c" Title="Telegram ChatId">
            @c.Telegram?.ChatId
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator Value="paginationState" />

@code {
    private string searchValue;

    private IQueryable<Contact> contacts;
    private PaginationState paginationState = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            contacts = (await contactsRepository.GetContactsAsync()).AsQueryable();
            StateHasChanged();
        }
    }

}
