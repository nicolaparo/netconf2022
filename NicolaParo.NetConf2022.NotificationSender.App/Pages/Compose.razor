@page "/compose/{ContactId:guid?}"

@using NicolaParo.NetConf2022.NotificationSender.Services.Repositories
@using NicolaParo.NetConf2022.NotificationSender.Models

@inject IContactsRepository ContactsRepository
@inject IScheduledNotificationsRepository ScheduledNotificationsRepository
@inject IJSRuntime jsRuntime

<h3>Send Notification</h3>

<div class="row">
    @if (contact is not null)
    {
        <div class="col-3">
            <ContactDisplay Contact="contact" />
        </div>
    }
    <form class="col">

        <div class="form-group mb-3">
            <label>Title</label>
            <input type="text" class="form-control" @bind="Title" />
        </div>

        <div class="form-group mb-3">
            <label>Content</label>
            <textarea class="form-control" rows="5" @bind="Text"></textarea>
        </div>

        <div class="form-group mb-3">
            <label>Send At</label>
            <input type="datetime-local" class="form-control" @bind="SendAt" />
        </div>
    </form>
</div>
<div>
    <button class="btn btn-outline-primary" @onclick="NavigateBackAsync">
        Discard
    </button>
    <button class="btn btn-primary" @onclick="OnSendButtonClickedAsync">
        Send
    </button>
</div>


<NavigationLock ConfirmExternalNavigation="ShouldStayOnThisPage()" OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync" />

@code {
    private Contact contact;

    [Parameter]
    public Guid? ContactId { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public DateTime SendAt { get; set; } = DateTime.Now;

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext locationChangingContext)
    {
        if (ShouldStayOnThisPage())
            if (!await jsRuntime.InvokeAsync<bool>("confirm", "There are unsaved changes on the page. Are you sure you want to leave?"))
                locationChangingContext.PreventNavigation();
    }

    private bool ShouldStayOnThisPage()
    {
        if (string.IsNullOrWhiteSpace(Title))
            if (string.IsNullOrWhiteSpace(Text))
                return false;
        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (ContactId.HasValue)
            {
                contact = await ContactsRepository.GetContactByIdAsync(ContactId.Value);
                StateHasChanged();
            }
        }
    }

    private async void OnSendButtonClickedAsync()
    {
        var contacts = new[] { contact };

        if (contact is null)
            contacts = await ContactsRepository.GetContactsAsync(c => c.Telegram != null);

        foreach (var contact in contacts)
        {
            await ScheduledNotificationsRepository.InsertScheduledNotificationAsync(new ScheduledNotificationInfo
                {
                    Notification = new Notification
                    {
                        Text = Text,
                        Contact = contact,
                        Title = Title
                    },
                    ScheduleSendAt = SendAt
                });
        }

        Text = null;
        Title = null;

        StateHasChanged();

        _ = NavigateBackAsync();
    }

    private async Task NavigateBackAsync()
    {
        await jsRuntime.InvokeVoidAsync("navigation.back");
    }
}
